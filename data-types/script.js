
true + false                       // числовое - 1 + 0 = 1
12 / "6"                           // числовое 12/6 = 2


"number" + 15 + 3                  // строковое "number153"
15 + 3 + "number"                  // сначала сложение, потом строковое "18number"


[1] > null
// массив - в строку - в число 
//'1' > 0 
//1 > 0 - true

"foo" + + "bar"                    
// унарный +, числовое преобразование, сложение строк
//'foo' + (+"bar)
// 'foo' + NaN


'true' == true                     // числовое NaN == 1 => false
false == 'false'                   // числовое 0 == NaN => false


null == ''
// null равно только Null или undefined и больше ничему
// не преобразуется => false

!!"false" == !!"true"
//логическое 1==1 => true


["x"] == "x"
// числовое
// valueOf массива возвращает сам массив, это значение игнорируется (не примитив)
// вызов toString -> строка 'x'
// 'x' == 'x' => true


[] + null + 1
// числовое
// valueOf массива игнорируется
// '' + null + 1
// словжение строк => 'null1'


0 || "0" && {}
// преобразование к логическому, но возвращают исходные
// 0 - ложь
// "0"" - истина
// {} - истина
// (false || true) && {} // внутреннее
// "0" && {}
// true && true // внутреннее
// => возвращает {}


[1,2,3] == [1,2,3]
// false 
//(без преобразования, проверка на равенство ссылок на объект)



{}+[]+{}+[1]
//попытка числового
//Хитрость тут в том, что первая пара фигурных скобок {} не рассматривается как объектный литерал, она воспринимается как блок кода, который игнорируется.
//Вычисление начинается со следующего выражения, +[], которое преобразуется в пустую строку через метод toString(), а затем в 0.
// ==> +[]+{}+[1]
// ==> 0 + {} + [1]
// ==> 0 + '[object Object]' + [1]
// ==> '0[object Object]' + [1]
// ==> '0[object Object]' + '1'
// ==> '0[object Object]1'



!+[]+[]+![]
//==> (!+[]) + [] + (![])
// ==> !0 + [] + false
// ==> true + [] + false
// ==> true + '' + false
// ==> 'truefalse'



new Date(0) - 0
//преобразование в число для объекта типа Date. Метод Date.valueOf() возвращает число миллисекунд с начала эпохи Unix.
// 0- 0 = 0

new Date(0) + 0
//Оператор + вызывает преобразование по умолчанию. Объекты типа Data считают таким преобразованием конверсию в строку, в результате используется метод toString(), а не valueOf().
//==> 'Thu Jan 01 1970 02:00:00 GMT+0200 (EET)' + 0
//==> 'Thu Jan 01 1970 02:00:00 GMT+0200 (EET)0'